// Teste Descri√ß√£o Pedido - Verificar se a descri√ß√£o est√° formatada corretamente
// Execute este script no console do navegador

console.log('üîß Teste Descri√ß√£o Pedido - Verificar se a descri√ß√£o est√° formatada corretamente');

// Fun√ß√£o para simular a gera√ß√£o de descri√ß√£o do pedido
function generateOrderDescription(orderId) {
  if (!orderId) {
    return 'Compra Online';
  }
  
  // Pegar apenas os primeiros 8 caracteres do ID e formatar
  const shortId = orderId.substring(0, 8).toUpperCase();
  const timestamp = new Date().toLocaleDateString('pt-AO', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
  
  return `Compra #${shortId} - ${timestamp}`;
}

// Fun√ß√£o para testar diferentes IDs de pedido
function testarDescricoes() {
  console.log('üß™ Testando diferentes descri√ß√µes de pedido...');
  
  const testCases = [
    null,
    '0d732633-83f7-41d3-9678-e803aa9625ba',
    'abc123def456',
    'ORDER-12345',
    'pedido-2025-001',
    '1234567890abcdef'
  ];
  
  testCases.forEach((orderId, index) => {
    const descricao = generateOrderDescription(orderId);
    console.log(`\nüìã Teste ${index + 1}:`);
    console.log(`   Order ID: ${orderId || 'null'}`);
    console.log(`   Descri√ß√£o: ${descricao}`);
    console.log(`   Comprimento: ${descricao.length} caracteres`);
    
    // Verificar se a descri√ß√£o √© amig√°vel
    if (descricao.length > 50) {
      console.log('   ‚ö†Ô∏è Descri√ß√£o muito longa');
    } else if (descricao.includes('0d732633-83f7-41d3-9678-e803aa9625ba')) {
      console.log('   ‚ùå Descri√ß√£o cont√©m ID completo (erro)');
    } else {
      console.log('   ‚úÖ Descri√ß√£o formatada corretamente');
    }
  });
}

// Fun√ß√£o para verificar descri√ß√µes na p√°gina atual
function verificarDescricoesPagina() {
  console.log('üîç Verificando descri√ß√µes na p√°gina atual...');
  
  // Buscar elementos que podem conter descri√ß√µes de pedido
  const elementos = document.querySelectorAll('p, span, div, h1, h2, h3, h4, h5, h6');
  
  elementos.forEach((elemento) => {
    const texto = elemento.textContent;
    
    // Verificar se cont√©m IDs longos de pedido
    if (texto.includes('0d732633-83f7-41d3-9678-e803aa9625ba') || 
        texto.includes('Pedido 0d732633')) {
      console.log('‚ùå Encontrado ID longo de pedido:', texto);
    }
    
    // Verificar se cont√©m descri√ß√µes formatadas
    if (texto.includes('Compra #') && texto.includes('-')) {
      console.log('‚úÖ Encontrada descri√ß√£o formatada:', texto);
    }
  });
}

// Fun√ß√£o para verificar componentes de pagamento
function verificarComponentesPagamento() {
  console.log('üîç Verificando componentes de pagamento...');
  
  // Buscar componentes de pagamento
  const multicaixaRef = document.querySelector('[class*="MulticaixaRefPayment"]');
  const multicaixaExpress = document.querySelector('[class*="MulticaixaExpressPayment"]');
  
  if (multicaixaRef) {
    console.log('üìã Componente MulticaixaRefPayment encontrado');
    
    // Buscar descri√ß√£o no componente
    const descricao = multicaixaRef.querySelector('[class*="description"]');
    if (descricao) {
      console.log('   Descri√ß√£o:', descricao.textContent);
    }
  }
  
  if (multicaixaExpress) {
    console.log('üìã Componente MulticaixaExpressPayment encontrado');
    
    // Buscar descri√ß√£o no componente
    const descricao = multicaixaExpress.querySelector('[class*="description"]');
    if (descricao) {
      console.log('   Descri√ß√£o:', descricao.textContent);
    }
  }
}

// Fun√ß√£o para simular cria√ß√£o de pedido
function simularCriacaoPedido() {
  console.log('üß™ Simulando cria√ß√£o de pedido...');
  
  // Simular ID de pedido
  const orderId = '0d732633-83f7-41d3-9678-e803aa9625ba';
  const descricaoAntiga = `Pedido ${orderId}`;
  const descricaoNova = generateOrderDescription(orderId);
  
  console.log('üìã Compara√ß√£o de descri√ß√µes:');
  console.log(`   Antiga: "${descricaoAntiga}"`);
  console.log(`   Nova: "${descricaoNova}"`);
  console.log(`   Melhoria: ${descricaoAntiga.length - descricaoNova.length} caracteres a menos`);
  
  // Verificar se a nova descri√ß√£o √© melhor
  if (descricaoNova.length < descricaoAntiga.length) {
    console.log('‚úÖ Nova descri√ß√£o √© mais concisa');
  } else {
    console.log('‚ùå Nova descri√ß√£o n√£o √© mais concisa');
  }
  
  // Verificar se cont√©m informa√ß√µes √∫teis
  if (descricaoNova.includes('Compra #') && descricaoNova.includes('-')) {
    console.log('‚úÖ Nova descri√ß√£o cont√©m informa√ß√µes √∫teis');
  } else {
    console.log('‚ùå Nova descri√ß√£o n√£o cont√©m informa√ß√µes √∫teis');
  }
}

// Fun√ß√£o para verificar se estamos na p√°gina de checkout
function verificarPaginaCheckout() {
  console.log('üîç Verificando se estamos na p√°gina de checkout...');
  
  const isCheckoutPage = window.location.pathname.includes('checkout');
  
  if (isCheckoutPage) {
    console.log('‚úÖ Estamos na p√°gina de checkout');
    verificarDescricoesPagina();
    verificarComponentesPagamento();
  } else {
    console.log('üìã N√£o estamos na p√°gina de checkout');
    console.log('üí° Navegue para /checkout para ver as descri√ß√µes em a√ß√£o');
  }
}

// Executar testes
console.log('üöÄ Executando testes de descri√ß√£o de pedido...');
console.log('1. Testar gera√ß√£o de descri√ß√µes');
console.log('2. Simular cria√ß√£o de pedido');
console.log('3. Verificar p√°gina de checkout');
console.log('4. Verificar componentes de pagamento');

// Aguardar 2 segundos antes de executar
setTimeout(() => {
  testarDescricoes();
  
  setTimeout(() => {
    simularCriacaoPedido();
    
    setTimeout(() => {
      verificarPaginaCheckout();
    }, 1000);
  }, 1000);
}, 2000);

console.log('üìù Testes iniciados. Verifique o console para resultados.'); 